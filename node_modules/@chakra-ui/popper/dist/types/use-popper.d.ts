import { Modifier, Placement, VirtualElement } from "@popperjs/core";
export type { Placement };
export interface UsePopperProps {
    offset?: [x: number, y: number];
    gutter?: number;
    preventOverflow?: boolean;
    flip?: boolean;
    matchWidth?: boolean;
    boundary?: "clippingParents" | "scrollParent" | HTMLElement;
    eventListeners?: boolean | {
        scroll?: boolean;
        resize?: boolean;
    };
    arrowPadding?: number;
    strategy?: "absolute" | "fixed";
    placement?: Placement;
    modifiers?: Array<Partial<Modifier<string, any>>>;
}
export declare function usePopper(props?: UsePopperProps): {
    update: (() => Promise<Partial<import("@popperjs/core").State>>) | undefined;
    forceUpdate: (() => void) | undefined;
    referenceRef: <T extends Element | VirtualElement>(node: T | null) => void;
    popperRef: <T_1 extends HTMLElement>(node: T_1 | null) => void;
};
export declare type UsePopperReturn = ReturnType<typeof usePopper>;
//# sourceMappingURL=use-popper.d.ts.map