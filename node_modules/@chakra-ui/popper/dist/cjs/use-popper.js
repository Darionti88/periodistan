"use strict";

exports.__esModule = true;
exports.usePopper = usePopper;

var _utils = require("@chakra-ui/utils");

var _core = require("@popperjs/core");

var _react = require("react");

var popperModifiers = _interopRequireWildcard(require("./modifiers"));

var _utils2 = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var defaultProps = {
  placement: "bottom",
  strategy: "absolute",
  flip: true,
  gutter: 8,
  arrowPadding: 8,
  preventOverflow: true,
  eventListeners: true,
  modifiers: [],
  boundary: "clippingParents"
};

function usePopper(props) {
  if (props === void 0) {
    props = {};
  }

  var opts = Object.assign({}, defaultProps, (0, _utils.filterUndefined)(props));
  var _opts$modifiers = opts.modifiers,
      modifiers = _opts$modifiers === void 0 ? [] : _opts$modifiers,
      placementProp = opts.placement,
      strategy = opts.strategy,
      arrowPadding = opts.arrowPadding,
      eventListeners = opts.eventListeners,
      offset = opts.offset,
      gutter = opts.gutter,
      flip = opts.flip,
      boundary = opts.boundary,
      preventOverflow = opts.preventOverflow,
      matchWidth = opts.matchWidth;
  var reference = (0, _react.useRef)(null);
  var popper = (0, _react.useRef)(null);
  var instanceRef = (0, _react.useRef)(null);
  var cleanup = (0, _react.useRef)(function () {});
  var setupPopper = (0, _react.useCallback)(function () {
    if (!reference.current || !popper.current) return;
    cleanup.current == null ? void 0 : cleanup.current();
    instanceRef.current = (0, _core.createPopper)(reference.current, popper.current, {
      placement: placementProp,
      modifiers: modifiers.concat([popperModifiers.innerArrow, popperModifiers.positionArrow, popperModifiers.transformOrigin, _extends({}, popperModifiers.matchWidth, {
        enabled: !!matchWidth
      }), _extends({
        name: "eventListeners"
      }, (0, _utils2.getEventListenerOptions)(eventListeners)), {
        name: "arrow",
        options: {
          padding: arrowPadding
        }
      }, {
        name: "offset",
        options: {
          offset: offset != null ? offset : [0, gutter]
        }
      }, {
        name: "flip",
        enabled: !!flip,
        options: {
          padding: 8
        }
      }, {
        name: "preventOverflow",
        enabled: !!preventOverflow,
        options: {
          boundary: boundary
        }
      }]),
      strategy: strategy
    }); // force update one-time to fix any positioning issues

    instanceRef.current.forceUpdate();
    cleanup.current = instanceRef.current.destroy;
  }, [placementProp, modifiers, matchWidth, eventListeners, arrowPadding, offset, gutter, flip, preventOverflow, boundary, strategy]);
  (0, _react.useEffect)(function () {
    return function () {
      var _instanceRef$current;

      (_instanceRef$current = instanceRef.current) == null ? void 0 : _instanceRef$current.destroy();
      instanceRef.current = null;
    };
  }, []);
  return (0, _react.useMemo)(function () {
    var _instanceRef$current2, _instanceRef$current3;

    return {
      update: (_instanceRef$current2 = instanceRef.current) == null ? void 0 : _instanceRef$current2.update,
      forceUpdate: (_instanceRef$current3 = instanceRef.current) == null ? void 0 : _instanceRef$current3.forceUpdate,
      referenceRef: function referenceRef(node) {
        reference.current = node;
        setupPopper();
      },
      popperRef: function popperRef(node) {
        popper.current = node;
        setupPopper();
      }
    };
  }, [setupPopper]);
}
//# sourceMappingURL=use-popper.js.map