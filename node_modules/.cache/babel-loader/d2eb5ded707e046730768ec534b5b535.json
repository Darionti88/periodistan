{"ast":null,"code":"import _slicedToArray from\"/Users/darionti/Desktop/WebDev/Periodistan/periodistan/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{useState,useEffect}from'react';import Post from'../../Components/Post';import europaThread from'../../JsonThreads/europaThread.json';import asiaThread from'../../JsonThreads/asiaThread.json';import{useHistory}from'react-router-dom';import Pagination from'react-bootstrap/Pagination';import'./stylePost.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function BlogPostLocal(){// ## Here i store, as a separate array, the part of the Json file where i have the info i need\nvar _useState=useState([{text:\"\",images:[\"\"]}]),_useState2=_slicedToArray(_useState,2),slicedThread=_useState2[0],setSlicedThread=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),currentPage=_useState4[0],setCurrentPage=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),totalPosts=_useState6[0],setTotalPosts=_useState6[1];// ## This part of the URL will help the program choose wich JSON file it will store \nvar history=useHistory();var currentUrl=history.location.pathname;console.log(currentUrl.length);useEffect(function(){// ## My linkTo always have 5 letter so it is always the same part \nvar continent=currentUrl.slice(1,6);var threadWithOneDigitId=currentUrl.slice(-1);var threadWithTwoDigitId=currentUrl.slice(-2);if(continent===\"europ\"){// ## How many Posts does the thread have\n// ## EUROPA THREAD -------\nsetTotalPosts(function(){if(currentUrl.length===8){return europaThread[threadWithOneDigitId].cards.length;}else{return europaThread[threadWithTwoDigitId].cards.length;}});// ## Here I get the array where I have the actual Info\nsetSlicedThread(function(){if(currentUrl.length===8){return europaThread[threadWithOneDigitId].cards.slice(0,europaThread[threadWithOneDigitId].cards.length);}else{return europaThread[threadWithTwoDigitId].cards.slice(0,europaThread[threadWithTwoDigitId].cards.length);}});// ## ASIA THREAD -------\nconsole.log(continent);}else if(continent.slice(0,3)===\"asi\"){setTotalPosts(function(){if(currentUrl.length===6){return asiaThread[threadWithOneDigitId].cards.length;}else{return asiaThread[threadWithTwoDigitId].cards.length;}});setSlicedThread(function(){if(currentUrl.length===6){return asiaThread[threadWithOneDigitId].cards.slice(0,asiaThread[threadWithOneDigitId].cards.length);}else{return asiaThread[threadWithTwoDigitId].cards.slice(0,asiaThread[threadWithTwoDigitId].cards.length);}});}},[currentUrl]);// ## Number of pages the Pagination will display. As i only want 1 post per page it is simple math.\nvar pageNumbers=[];for(var i=1;i<=totalPosts/1;i++){pageNumbers.push(i);}// ## Sets the current page using the Pagination.Item ID, wich is the same number as the page.\nfunction handleClick(e){setCurrentPage(Number(e.target.id));}return/*#__PURE__*/_jsxs(\"div\",{className:\"blogpost-container\",children:[slicedThread.slice(currentPage-1,currentPage).map(function(item,index){return/*#__PURE__*/_jsx(Post,{cardText:item.text,cardImage1:item.images[0],cardImage2:item.images[1],cardImage3:item.images[2],cardImage4:item.images[3],cardImage5:item.images[4]},index);}),/*#__PURE__*/_jsx(Pagination,{children:pageNumbers.map(function(number){return/*#__PURE__*/_jsx(Pagination.Item,{id:number,onClick:handleClick,children:number},number);})})]});}","map":{"version":3,"sources":["/Users/darionti/Desktop/WebDev/Periodistan/periodistan/client/src/Pages/BlogPostLocalPage/Index.js"],"names":["React","useState","useEffect","Post","europaThread","asiaThread","useHistory","Pagination","BlogPostLocal","text","images","slicedThread","setSlicedThread","currentPage","setCurrentPage","totalPosts","setTotalPosts","history","currentUrl","location","pathname","console","log","length","continent","slice","threadWithOneDigitId","threadWithTwoDigitId","cards","pageNumbers","i","push","handleClick","e","Number","target","id","map","item","index","number"],"mappings":"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","sourcesContent":["\nimport  React  from \"react\";\nimport {useState, useEffect} from 'react'\nimport Post from '../../Components/Post'\nimport europaThread from '../../JsonThreads/europaThread.json'\nimport asiaThread from '../../JsonThreads/asiaThread.json'\nimport {useHistory} from 'react-router-dom'\nimport Pagination from 'react-bootstrap/Pagination'\nimport './stylePost.css'\n\n\nexport default function BlogPostLocal(){\n\n  // ## Here i store, as a separate array, the part of the Json file where i have the info i need\n  const [slicedThread, setSlicedThread] = useState([\n    {\n      text: \"\",\n      images: [\"\"] \n    }\n])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalPosts, setTotalPosts] = useState(\"\")\n  \n   // ## This part of the URL will help the program choose wich JSON file it will store \n  const history = useHistory()\n  const currentUrl = history.location.pathname\n  console.log(currentUrl.length)\n\nuseEffect(() => {\n  // ## My linkTo always have 5 letter so it is always the same part \n  const continent = currentUrl.slice(1, 6)\n  const threadWithOneDigitId = currentUrl.slice(-1)\n  const threadWithTwoDigitId = currentUrl.slice(-2)\n  if (continent === \"europ\") {\n  // ## How many Posts does the thread have\n  // ## EUROPA THREAD -------\n    setTotalPosts(()=>{\n      if(currentUrl.length === 8) {\n        return (europaThread[threadWithOneDigitId].cards.length)}\n        else{\n          return (europaThread[threadWithTwoDigitId].cards.length)\n        }})\n    // ## Here I get the array where I have the actual Info\n    setSlicedThread(()=>{\n      if(currentUrl.length === 8){\n        return (europaThread[threadWithOneDigitId].cards.slice(0, europaThread[threadWithOneDigitId].cards.length))}\n        else {\n          return (europaThread[threadWithTwoDigitId].cards.slice(0, europaThread[threadWithTwoDigitId].cards.length))\n        }\n      })\n\n    // ## ASIA THREAD -------\n    console.log(continent)\n  } else if(continent.slice(0,3) === \"asi\" ) {\n    setTotalPosts(()=>{\n      if(currentUrl.length === 6) {\n        return (asiaThread[threadWithOneDigitId].cards.length)}\n        else{\n          return (asiaThread[threadWithTwoDigitId].cards.length)\n        }})\n    setSlicedThread(()=>{\n      if(currentUrl.length === 6){\n        return (asiaThread[threadWithOneDigitId].cards.slice(0, asiaThread[threadWithOneDigitId].cards.length))}\n        else {\n          return (asiaThread[threadWithTwoDigitId].cards.slice(0, asiaThread[threadWithTwoDigitId].cards.length))\n        }\n      })\n  }\n}, [currentUrl])\n\n\n// ## Number of pages the Pagination will display. As i only want 1 post per page it is simple math.\nconst pageNumbers = []\nfor (let i = 1; i <= totalPosts / 1; i++){\n    pageNumbers.push(i)\n}\n\n// ## Sets the current page using the Pagination.Item ID, wich is the same number as the page.\nfunction handleClick(e){\n      setCurrentPage(Number(e.target.id))\n}\n\n  return (\n      <div className='blogpost-container'>\n      {/* // ## Using the CurrentPage I choose wich of the posts i want to show */}\n            {  slicedThread.slice(currentPage - 1, currentPage).map((item, index)=>{\n                    return (<Post  \n                  key={index}\n                  cardText={item.text}\n                  cardImage1={item.images[0]}\n                  cardImage2={item.images[1]}\n                  cardImage3={item.images[2]}\n                  cardImage4={item.images[3]}\n                  cardImage5={item.images[4]} \n                  /> )})  } \n          <Pagination>\n          { pageNumbers.map(number => \n            ( <Pagination.Item \n                key={number} \n                id={number}\n                onClick={handleClick}\n                >{number}</Pagination.Item> )) \n                \n          }\n          </Pagination>\n\n      </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}