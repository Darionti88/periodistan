{"ast":null,"code":"import { numberValidator } from '../validation';\nconst logFactorialTable = [0.0, 0.0, 0.69314718055994529, 1.791759469228055, 3.1780538303479458, 4.7874917427820458, 6.5792512120101012, 8.5251613610654147, 10.604602902745251, 12.801827480081469];\n\nconst logFactorial = k => {\n  return logFactorialTable[k];\n};\n\nconst logSqrt2PI = 0.91893853320467267;\nexport default ((random, lambda = 1) => {\n  numberValidator(lambda).isPositive();\n\n  if (lambda < 10) {\n    // inversion method\n    const expMean = Math.exp(-lambda);\n    return () => {\n      let p = expMean;\n      let x = 0;\n      let u = random.next();\n\n      while (u > p) {\n        u = u - p;\n        p = lambda * p / ++x;\n      }\n\n      return x;\n    };\n  } else {\n    // generative method\n    const smu = Math.sqrt(lambda);\n    const b = 0.931 + 2.53 * smu;\n    const a = -0.059 + 0.02483 * b;\n    const invAlpha = 1.1239 + 1.1328 / (b - 3.4);\n    const vR = 0.9277 - 3.6224 / (b - 2);\n    return () => {\n      var _a;\n\n      while (true) {\n        let u;\n        let v = random.next();\n\n        if (v <= 0.86 * vR) {\n          u = v / vR - 0.43;\n          return Math.floor((2 * a / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445);\n        }\n\n        if (v >= vR) {\n          u = random.next() - 0.5;\n        } else {\n          u = v / vR - 0.93;\n          u = (u < 0 ? -0.5 : 0.5) - u;\n          v = random.next() * vR;\n        }\n\n        const us = 0.5 - Math.abs(u);\n\n        if (us < 0.013 && v > us) {\n          continue;\n        }\n\n        const k = Math.floor((2 * a / us + b) * u + lambda + 0.445);\n        v = v * invAlpha / (a / (us * us) + b);\n\n        if (k >= 10) {\n          const t = (k + 0.5) * Math.log(lambda / k) - lambda - logSqrt2PI + k - (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k;\n\n          if (Math.log(v * smu) <= t) {\n            return k;\n          }\n        } else if (k >= 0) {\n          const f = (_a = logFactorial(k)) !== null && _a !== void 0 ? _a : 0;\n\n          if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {\n            return k;\n          }\n        }\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../src/distributions/poisson.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { numberValidator } from '../validation';\nconst logFactorialTable = [\n    0.0,\n    0.0,\n    0.69314718055994529,\n    1.791759469228055,\n    3.1780538303479458,\n    4.7874917427820458,\n    6.5792512120101012,\n    8.5251613610654147,\n    10.604602902745251,\n    12.801827480081469\n];\nconst logFactorial = (k) => {\n    return logFactorialTable[k];\n};\nconst logSqrt2PI = 0.91893853320467267;\nexport default (random, lambda = 1) => {\n    numberValidator(lambda).isPositive();\n    if (lambda < 10) {\n        // inversion method\n        const expMean = Math.exp(-lambda);\n        return () => {\n            let p = expMean;\n            let x = 0;\n            let u = random.next();\n            while (u > p) {\n                u = u - p;\n                p = (lambda * p) / ++x;\n            }\n            return x;\n        };\n    }\n    else {\n        // generative method\n        const smu = Math.sqrt(lambda);\n        const b = 0.931 + 2.53 * smu;\n        const a = -0.059 + 0.02483 * b;\n        const invAlpha = 1.1239 + 1.1328 / (b - 3.4);\n        const vR = 0.9277 - 3.6224 / (b - 2);\n        return () => {\n            var _a;\n            while (true) {\n                let u;\n                let v = random.next();\n                if (v <= 0.86 * vR) {\n                    u = v / vR - 0.43;\n                    return Math.floor(((2 * a) / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445);\n                }\n                if (v >= vR) {\n                    u = random.next() - 0.5;\n                }\n                else {\n                    u = v / vR - 0.93;\n                    u = (u < 0 ? -0.5 : 0.5) - u;\n                    v = random.next() * vR;\n                }\n                const us = 0.5 - Math.abs(u);\n                if (us < 0.013 && v > us) {\n                    continue;\n                }\n                const k = Math.floor(((2 * a) / us + b) * u + lambda + 0.445);\n                v = (v * invAlpha) / (a / (us * us) + b);\n                if (k >= 10) {\n                    const t = (k + 0.5) * Math.log(lambda / k) -\n                        lambda -\n                        logSqrt2PI +\n                        k -\n                        (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k;\n                    if (Math.log(v * smu) <= t) {\n                        return k;\n                    }\n                }\n                else if (k >= 0) {\n                    const f = (_a = logFactorial(k)) !== null && _a !== void 0 ? _a : 0;\n                    if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {\n                        return k;\n                    }\n                }\n            }\n        };\n    }\n};\n//# sourceMappingURL=poisson.js.map"]},"metadata":{},"sourceType":"module"}