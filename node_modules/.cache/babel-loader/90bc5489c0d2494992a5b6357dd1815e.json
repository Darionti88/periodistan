{"ast":null,"code":"import RNG from './rng';\nimport RNGFactory from './rng-factory';\nimport uniform from './distributions/uniform';\nimport uniformInt from './distributions/uniform-int';\nimport uniformBoolean from './distributions/uniform-boolean';\nimport normal from './distributions/normal';\nimport logNormal from './distributions/log-normal';\nimport bernoulli from './distributions/bernoulli';\nimport binomial from './distributions/binomial';\nimport geometric from './distributions/geometric';\nimport poisson from './distributions/poisson';\nimport exponential from './distributions/exponential';\nimport irwinHall from './distributions/irwin-hall';\nimport bates from './distributions/bates';\nimport pareto from './distributions/pareto';\nimport RNGMathRandom from './generators/math-random';\nexport { RNG, RNGFactory };\n/**\n * Seedable random number generator supporting many common distributions.\n *\n * Defaults to Math.random as its underlying pseudorandom number generator.\n *\n * @name Random\n * @class\n *\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\n */\n\nexport class Random {\n  constructor(rng) {\n    this._cache = {}; // --------------------------------------------------------------------------\n    // Uniform utility functions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Convenience wrapper around `this.rng.next()`\n     *\n     * Returns a floating point number in [0, 1).\n     *\n     * @return {number}\n     */\n\n    this.next = () => {\n      return this._rng.next();\n    };\n    /**\n     * Samples a uniform random floating point number, optionally specifying\n     * lower and upper bounds.\n     *\n     * Convence wrapper around `random.uniform()`\n     *\n     * @param {number} [min=0] - Lower bound (float, inclusive)\n     * @param {number} [max=1] - Upper bound (float, exclusive)\n     * @return {number}\n     */\n\n\n    this.float = (min, max) => {\n      return this.uniform(min, max)();\n    };\n    /**\n     * Samples a uniform random integer, optionally specifying lower and upper\n     * bounds.\n     *\n     * Convence wrapper around `random.uniformInt()`\n     *\n     * @param {number} [min=0] - Lower bound (integer, inclusive)\n     * @param {number} [max=1] - Upper bound (integer, inclusive)\n     * @return {number}\n     */\n\n\n    this.int = (min, max) => {\n      return this.uniformInt(min, max)();\n    };\n    /**\n     * Samples a uniform random integer, optionally specifying lower and upper\n     * bounds.\n     *\n     * Convence wrapper around `random.uniformInt()`\n     *\n     * @alias `random.int`\n     *\n     * @param {number} [min=0] - Lower bound (integer, inclusive)\n     * @param {number} [max=1] - Upper bound (integer, inclusive)\n     * @return {number}\n     */\n\n\n    this.integer = (min, max) => {\n      return this.uniformInt(min, max)();\n    };\n    /**\n     * Samples a uniform random boolean value.\n     *\n     * Convence wrapper around `random.uniformBoolean()`\n     *\n     * @alias `random.boolean`\n     *\n     * @return {boolean}\n     */\n\n\n    this.bool = () => {\n      return this.uniformBoolean()();\n    };\n    /**\n     * Samples a uniform random boolean value.\n     *\n     * Convence wrapper around `random.uniformBoolean()`\n     *\n     * @return {boolean}\n     */\n\n\n    this.boolean = () => {\n      return this.uniformBoolean()();\n    }; // --------------------------------------------------------------------------\n    // Uniform distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n     *\n     * @param {number} [min=0] - Lower bound (float, inclusive)\n     * @param {number} [max=1] - Upper bound (float, exclusive)\n     * @return {function}\n     */\n\n\n    this.uniform = (min, max) => {\n      return this._memoize('uniform', uniform, min, max);\n    };\n    /**\n     * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n     *\n     * @param {number} [min=0] - Lower bound (integer, inclusive)\n     * @param {number} [max=1] - Upper bound (integer, inclusive)\n     * @return {function}\n     */\n\n\n    this.uniformInt = (min, max) => {\n      return this._memoize('uniformInt', uniformInt, min, max);\n    };\n    /**\n     * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\n     * with two possible outcomes, `true` or `false.\n     *\n     * This method is analogous to flipping a coin.\n     *\n     * @return {function}\n     */\n\n\n    this.uniformBoolean = () => {\n      return this._memoize('uniformBoolean', uniformBoolean);\n    }; // --------------------------------------------------------------------------\n    // Normal distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n     *\n     * @param {number} [mu=0] - Mean\n     * @param {number} [sigma=1] - Standard deviation\n     * @return {function}\n     */\n\n\n    this.normal = (mu, sigma) => {\n      return normal(this, mu, sigma);\n    };\n    /**\n     * Generates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n     *\n     * @param {number} [mu=0] - Mean of underlying normal distribution\n     * @param {number} [sigma=1] - Standard deviation of underlying normal distribution\n     * @return {function}\n     */\n\n\n    this.logNormal = (mu, sigma) => {\n      return logNormal(this, mu, sigma);\n    }; // --------------------------------------------------------------------------\n    // Bernoulli distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n     *\n     * @param {number} [p=0.5] - Success probability of each trial.\n     * @return {function}\n     */\n\n\n    this.bernoulli = p => {\n      return bernoulli(this, p);\n    };\n    /**\n     * Generates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n     *\n     * @param {number} [n=1] - Number of trials.\n     * @param {number} [p=0.5] - Success probability of each trial.\n     * @return {function}\n     */\n\n\n    this.binomial = (n, p) => {\n      return binomial(this, n, p);\n    };\n    /**\n     * Generates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n     *\n     * @param {number} [p=0.5] - Success probability of each trial.\n     * @return {function}\n     */\n\n\n    this.geometric = p => {\n      return geometric(this, p);\n    }; // --------------------------------------------------------------------------\n    // Poisson distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n     *\n     * @param {number} [lambda=1] - Mean (lambda > 0)\n     * @return {function}\n     */\n\n\n    this.poisson = lambda => {\n      return poisson(this, lambda);\n    };\n    /**\n     * Generates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n     *\n     * @param {number} [lambda=1] - Inverse mean (lambda > 0)\n     * @return {function}\n     */\n\n\n    this.exponential = lambda => {\n      return exponential(this, lambda);\n    }; // --------------------------------------------------------------------------\n    // Misc distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n     *\n     * @param {number} [n=1] - Number of uniform samples to sum (n >= 0)\n     * @return {function}\n     */\n\n\n    this.irwinHall = n => {\n      return irwinHall(this, n);\n    };\n    /**\n     * Generates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n     *\n     * @param {number} [n=1] - Number of uniform samples to average (n >= 1)\n     * @return {function}\n     */\n\n\n    this.bates = n => {\n      return bates(this, n);\n    };\n    /**\n     * Generates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n     *\n     * @param {number} [alpha=1] - Alpha\n     * @return {function}\n     */\n\n\n    this.pareto = alpha => {\n      return pareto(this, alpha);\n    };\n\n    if (rng && rng instanceof RNG) {\n      this.use(rng);\n    } else {\n      this.use(new RNGMathRandom());\n    }\n\n    this._cache = {};\n  }\n  /**\n   * @member {RNG} Underlying pseudo-random number generator\n   */\n\n\n  get rng() {\n    return this._rng;\n  }\n  /**\n   * Creates a new `Random` instance, optionally specifying parameters to\n   * set a new seed.\n   *\n   * @see RNG.clone\n   *\n   * @param {string} [seed] - Optional seed for new RNG.\n   * @param {object} [opts] - Optional config for new RNG options.\n   * @return {Random}\n   */\n\n\n  clone(...args) {\n    if (args.length) {\n      return new Random(RNGFactory(...args));\n    } else {\n      return new Random(this.rng.clone());\n    }\n  }\n  /**\n   * Sets the underlying pseudorandom number generator used via\n   * either an instance of `seedrandom`, a custom instance of RNG\n   * (for PRNG plugins), or a string specifying the PRNG to use\n   * along with an optional `seed` and `opts` to initialize the\n   * RNG.\n   *\n   * @example\n   * const random = require('random')\n   *\n   * random.use('example_seedrandom_string')\n   * // or\n   * random.use(seedrandom('kittens'))\n   * // or\n   * random.use(Math.random)\n   *\n   * @param {...*} args\n   */\n\n\n  use(...args) {\n    this._rng = RNGFactory(...args);\n  }\n  /**\n   * Patches `Math.random` with this Random instance's PRNG.\n   */\n\n\n  patch() {\n    if (this._patch) {\n      throw new Error('Math.random already patched');\n    }\n\n    this._patch = Math.random;\n    Math.random = this.uniform();\n  }\n  /**\n   * Restores a previously patched `Math.random` to its original value.\n   */\n\n\n  unpatch() {\n    if (this._patch) {\n      Math.random = this._patch;\n      delete this._patch;\n    }\n  } // --------------------------------------------------------------------------\n  // Internal\n  // --------------------------------------------------------------------------\n\n  /**\n   * Memoizes distributions to ensure they're only created when necessary.\n   *\n   * Returns a thunk which that returns independent, identically distributed\n   * samples from the specified distribution.\n   *\n   * @private\n   *\n   * @param {string} label - Name of distribution\n   * @param {function} getter - Function which generates a new distribution\n   * @param {...*} args - Distribution-specific arguments\n   *\n   * @return {function}\n   */\n\n\n  _memoize(label, getter, ...args) {\n    const key = `${args.join(';')}`;\n    let value = this._cache[label];\n\n    if (value === undefined || value.key !== key) {\n      value = {\n        key,\n        distribution: getter(this, ...args)\n      };\n      this._cache[label] = value;\n    }\n\n    return value.distribution;\n  }\n\n} // defaults to Math.random as its RNG\n\nexport default new Random();","map":{"version":3,"sources":["../../src/random.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import RNG from './rng';\nimport RNGFactory from './rng-factory';\nimport uniform from './distributions/uniform';\nimport uniformInt from './distributions/uniform-int';\nimport uniformBoolean from './distributions/uniform-boolean';\nimport normal from './distributions/normal';\nimport logNormal from './distributions/log-normal';\nimport bernoulli from './distributions/bernoulli';\nimport binomial from './distributions/binomial';\nimport geometric from './distributions/geometric';\nimport poisson from './distributions/poisson';\nimport exponential from './distributions/exponential';\nimport irwinHall from './distributions/irwin-hall';\nimport bates from './distributions/bates';\nimport pareto from './distributions/pareto';\nimport RNGMathRandom from './generators/math-random';\nexport { RNG, RNGFactory };\n/**\n * Seedable random number generator supporting many common distributions.\n *\n * Defaults to Math.random as its underlying pseudorandom number generator.\n *\n * @name Random\n * @class\n *\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\n */\nexport class Random {\n    constructor(rng) {\n        this._cache = {};\n        // --------------------------------------------------------------------------\n        // Uniform utility functions\n        // --------------------------------------------------------------------------\n        /**\n         * Convenience wrapper around `this.rng.next()`\n         *\n         * Returns a floating point number in [0, 1).\n         *\n         * @return {number}\n         */\n        this.next = () => {\n            return this._rng.next();\n        };\n        /**\n         * Samples a uniform random floating point number, optionally specifying\n         * lower and upper bounds.\n         *\n         * Convence wrapper around `random.uniform()`\n         *\n         * @param {number} [min=0] - Lower bound (float, inclusive)\n         * @param {number} [max=1] - Upper bound (float, exclusive)\n         * @return {number}\n         */\n        this.float = (min, max) => {\n            return this.uniform(min, max)();\n        };\n        /**\n         * Samples a uniform random integer, optionally specifying lower and upper\n         * bounds.\n         *\n         * Convence wrapper around `random.uniformInt()`\n         *\n         * @param {number} [min=0] - Lower bound (integer, inclusive)\n         * @param {number} [max=1] - Upper bound (integer, inclusive)\n         * @return {number}\n         */\n        this.int = (min, max) => {\n            return this.uniformInt(min, max)();\n        };\n        /**\n         * Samples a uniform random integer, optionally specifying lower and upper\n         * bounds.\n         *\n         * Convence wrapper around `random.uniformInt()`\n         *\n         * @alias `random.int`\n         *\n         * @param {number} [min=0] - Lower bound (integer, inclusive)\n         * @param {number} [max=1] - Upper bound (integer, inclusive)\n         * @return {number}\n         */\n        this.integer = (min, max) => {\n            return this.uniformInt(min, max)();\n        };\n        /**\n         * Samples a uniform random boolean value.\n         *\n         * Convence wrapper around `random.uniformBoolean()`\n         *\n         * @alias `random.boolean`\n         *\n         * @return {boolean}\n         */\n        this.bool = () => {\n            return this.uniformBoolean()();\n        };\n        /**\n         * Samples a uniform random boolean value.\n         *\n         * Convence wrapper around `random.uniformBoolean()`\n         *\n         * @return {boolean}\n         */\n        this.boolean = () => {\n            return this.uniformBoolean()();\n        };\n        // --------------------------------------------------------------------------\n        // Uniform distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n         *\n         * @param {number} [min=0] - Lower bound (float, inclusive)\n         * @param {number} [max=1] - Upper bound (float, exclusive)\n         * @return {function}\n         */\n        this.uniform = (min, max) => {\n            return this._memoize('uniform', uniform, min, max);\n        };\n        /**\n         * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n         *\n         * @param {number} [min=0] - Lower bound (integer, inclusive)\n         * @param {number} [max=1] - Upper bound (integer, inclusive)\n         * @return {function}\n         */\n        this.uniformInt = (min, max) => {\n            return this._memoize('uniformInt', uniformInt, min, max);\n        };\n        /**\n         * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\n         * with two possible outcomes, `true` or `false.\n         *\n         * This method is analogous to flipping a coin.\n         *\n         * @return {function}\n         */\n        this.uniformBoolean = () => {\n            return this._memoize('uniformBoolean', uniformBoolean);\n        };\n        // --------------------------------------------------------------------------\n        // Normal distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n         *\n         * @param {number} [mu=0] - Mean\n         * @param {number} [sigma=1] - Standard deviation\n         * @return {function}\n         */\n        this.normal = (mu, sigma) => {\n            return normal(this, mu, sigma);\n        };\n        /**\n         * Generates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n         *\n         * @param {number} [mu=0] - Mean of underlying normal distribution\n         * @param {number} [sigma=1] - Standard deviation of underlying normal distribution\n         * @return {function}\n         */\n        this.logNormal = (mu, sigma) => {\n            return logNormal(this, mu, sigma);\n        };\n        // --------------------------------------------------------------------------\n        // Bernoulli distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n         *\n         * @param {number} [p=0.5] - Success probability of each trial.\n         * @return {function}\n         */\n        this.bernoulli = (p) => {\n            return bernoulli(this, p);\n        };\n        /**\n         * Generates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n         *\n         * @param {number} [n=1] - Number of trials.\n         * @param {number} [p=0.5] - Success probability of each trial.\n         * @return {function}\n         */\n        this.binomial = (n, p) => {\n            return binomial(this, n, p);\n        };\n        /**\n         * Generates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n         *\n         * @param {number} [p=0.5] - Success probability of each trial.\n         * @return {function}\n         */\n        this.geometric = (p) => {\n            return geometric(this, p);\n        };\n        // --------------------------------------------------------------------------\n        // Poisson distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n         *\n         * @param {number} [lambda=1] - Mean (lambda > 0)\n         * @return {function}\n         */\n        this.poisson = (lambda) => {\n            return poisson(this, lambda);\n        };\n        /**\n         * Generates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n         *\n         * @param {number} [lambda=1] - Inverse mean (lambda > 0)\n         * @return {function}\n         */\n        this.exponential = (lambda) => {\n            return exponential(this, lambda);\n        };\n        // --------------------------------------------------------------------------\n        // Misc distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n         *\n         * @param {number} [n=1] - Number of uniform samples to sum (n >= 0)\n         * @return {function}\n         */\n        this.irwinHall = (n) => {\n            return irwinHall(this, n);\n        };\n        /**\n         * Generates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n         *\n         * @param {number} [n=1] - Number of uniform samples to average (n >= 1)\n         * @return {function}\n         */\n        this.bates = (n) => {\n            return bates(this, n);\n        };\n        /**\n         * Generates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n         *\n         * @param {number} [alpha=1] - Alpha\n         * @return {function}\n         */\n        this.pareto = (alpha) => {\n            return pareto(this, alpha);\n        };\n        if (rng && rng instanceof RNG) {\n            this.use(rng);\n        }\n        else {\n            this.use(new RNGMathRandom());\n        }\n        this._cache = {};\n    }\n    /**\n     * @member {RNG} Underlying pseudo-random number generator\n     */\n    get rng() {\n        return this._rng;\n    }\n    /**\n     * Creates a new `Random` instance, optionally specifying parameters to\n     * set a new seed.\n     *\n     * @see RNG.clone\n     *\n     * @param {string} [seed] - Optional seed for new RNG.\n     * @param {object} [opts] - Optional config for new RNG options.\n     * @return {Random}\n     */\n    clone(...args) {\n        if (args.length) {\n            return new Random(RNGFactory(...args));\n        }\n        else {\n            return new Random(this.rng.clone());\n        }\n    }\n    /**\n     * Sets the underlying pseudorandom number generator used via\n     * either an instance of `seedrandom`, a custom instance of RNG\n     * (for PRNG plugins), or a string specifying the PRNG to use\n     * along with an optional `seed` and `opts` to initialize the\n     * RNG.\n     *\n     * @example\n     * const random = require('random')\n     *\n     * random.use('example_seedrandom_string')\n     * // or\n     * random.use(seedrandom('kittens'))\n     * // or\n     * random.use(Math.random)\n     *\n     * @param {...*} args\n     */\n    use(...args) {\n        this._rng = RNGFactory(...args);\n    }\n    /**\n     * Patches `Math.random` with this Random instance's PRNG.\n     */\n    patch() {\n        if (this._patch) {\n            throw new Error('Math.random already patched');\n        }\n        this._patch = Math.random;\n        Math.random = this.uniform();\n    }\n    /**\n     * Restores a previously patched `Math.random` to its original value.\n     */\n    unpatch() {\n        if (this._patch) {\n            Math.random = this._patch;\n            delete this._patch;\n        }\n    }\n    // --------------------------------------------------------------------------\n    // Internal\n    // --------------------------------------------------------------------------\n    /**\n     * Memoizes distributions to ensure they're only created when necessary.\n     *\n     * Returns a thunk which that returns independent, identically distributed\n     * samples from the specified distribution.\n     *\n     * @private\n     *\n     * @param {string} label - Name of distribution\n     * @param {function} getter - Function which generates a new distribution\n     * @param {...*} args - Distribution-specific arguments\n     *\n     * @return {function}\n     */\n    _memoize(label, getter, ...args) {\n        const key = `${args.join(';')}`;\n        let value = this._cache[label];\n        if (value === undefined || value.key !== key) {\n            value = {\n                key,\n                distribution: getter(this, ...args)\n            };\n            this._cache[label] = value;\n        }\n        return value.distribution;\n    }\n}\n// defaults to Math.random as its RNG\nexport default new Random();\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"module"}