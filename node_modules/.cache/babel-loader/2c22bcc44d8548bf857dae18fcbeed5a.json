{"ast":null,"code":"var _jsxFileName = \"/Users/darionti/Desktop/WebDev/Periodistan/periodistan/src/Pages/ContinentPostsPage/Index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../../Components/Card';\nimport europa from '../../JsonThreads/europaThread.json';\nimport asia from '../../JsonThreads/asiaThread.json';\nimport { useLocation } from 'react-router-dom';\nimport Spinner from 'react-bootstrap/Spinner';\nimport '../stylesContinents.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EuropaPage() {\n  _s();\n\n  const [thread, setThread] = useState([]);\n  const location = useLocation().pathname;\n  const [loaded, setloaded] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setloaded(true);\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    const continent = location.slice(1, location.length);\n\n    if (continent === 'europa') {\n      setThread(europa);\n    } else {\n      setThread(asia);\n    }\n\n    setTimeout(() => {\n      setloaded(true);\n    }, 1000);\n  }, [thread, location]); // ## I map the JSON file so i can get the cards with the title and image display. Depending on the direction the size of the card\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: !loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sr-only\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }, this) : thread.map((item, index) => {\n      if (item.direction === 'horizontal') {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          cardClass: \"card card--horizontal\",\n          linkTo: `${location.slice(0, location.length - 1)}/${item.id}`,\n          postId: item.id,\n          title: item.title,\n          fondo: item.background\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 32\n        }, this);\n      } else if (item.direction === 'vertical') {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          cardClass: \"card card--vertical\",\n          linkTo: `${location.slice(0, location.length - 1)}/${item.id}`,\n          postId: item.id,\n          title: item.title,\n          fondo: item.background\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 32\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          cardClass: \"card\",\n          linkTo: `${location.slice(0, location.length - 1)}/${item.id}`,\n          postId: item.id,\n          title: item.title,\n          fondo: item.background\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 32\n        }, this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EuropaPage, \"a2Xy+i4TQs39GZxsuHFLxdM/Phw=\", false, function () {\n  return [useLocation];\n});\n\n_c = EuropaPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EuropaPage\");","map":{"version":3,"sources":["/Users/darionti/Desktop/WebDev/Periodistan/periodistan/src/Pages/ContinentPostsPage/Index.js"],"names":["React","useState","useEffect","Card","europa","asia","useLocation","Spinner","EuropaPage","thread","setThread","location","pathname","loaded","setloaded","setTimeout","continent","slice","length","map","item","index","direction","id","title","background"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }  from 'react'\nimport Card from '../../Components/Card'\nimport europa from '../../JsonThreads/europaThread.json'\nimport asia from '../../JsonThreads/asiaThread.json'\nimport {useLocation} from 'react-router-dom'\nimport Spinner from 'react-bootstrap/Spinner'\nimport '../stylesContinents.css'\n\n\nexport default function EuropaPage(){\n\nconst [thread, setThread] = useState([])\nconst location = useLocation().pathname\n\nconst [loaded, setloaded] = useState(false)\n\n    useEffect(()=>{\n        setTimeout(()=>{\n        setloaded(true)}, 1000) \n    }, [])\n\n\nuseEffect(()=>{\n    const continent = location.slice(1, location.length)\n    if (continent === 'europa'){ setThread(europa)}\n    else{setThread(asia)}\n    setTimeout(()=>{\n        setloaded(true)}, 1000) \n}, [thread, location])\n    \n\n// ## I map the JSON file so i can get the cards with the title and image display. Depending on the direction the size of the card\n    return (\n        <div className='grid-container'>\n                { !loaded ? <div className='loading' >\n                                <Spinner  animation=\"border\" role=\"status\">\n                                    <span className=\"sr-only\">Loading...</span>\n                                </Spinner> \n                            </div> : thread.map((item, index)=> {\n                    if (item.direction === 'horizontal'){\n                        return <Card cardClass='card card--horizontal' linkTo={`${location.slice(0, location.length - 1)}/${item.id}`} postId={item.id} key={index}  title={item.title} fondo={item.background} /> }\n                    else if (item.direction === 'vertical'){\n                        return <Card cardClass='card card--vertical' linkTo={`${location.slice(0, location.length - 1)}/${item.id}`} postId={item.id} key={index} title={item.title} fondo={item.background}/> }\n                    else {\n                        return <Card cardClass='card' linkTo={`${location.slice(0, location.length - 1)}/${item.id}`}  postId={item.id} title={item.title} key={index} fondo={item.background} /> }\n                }) } \n        </div>\n    \n    )\n}"]},"metadata":{},"sourceType":"module"}