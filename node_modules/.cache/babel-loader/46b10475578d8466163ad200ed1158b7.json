{"ast":null,"code":"import _toConsumableArray from \"/Users/darionti/Desktop/WebDev/Periodistan/periodistan/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport seedrandom from 'seedrandom';\nimport RNG from './rng';\nimport RNGFunction from './generators/function';\n/**\n * Construct an RNG with variable inputs. Used in calls to Random constructor\n * @param {...*} args - Distribution-specific arguments\n * @return RNG\n *\n * @example\n * new Random(RNGFactory(...args))\n */\n\nexport default (function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _args$ = args[0],\n      arg0 = _args$ === void 0 ? 'default' : _args$,\n      rest = args.slice(1);\n\n  switch (typeof arg0) {\n    case 'object':\n      if (arg0 instanceof RNG) {\n        return arg0;\n      }\n\n      break;\n\n    case 'function':\n      return new RNGFunction(arg0);\n\n    case 'number':\n    case 'string':\n      return new RNGFunction(seedrandom.apply(void 0, _toConsumableArray(rest)));\n  }\n\n  throw new Error(\"invalid RNG \\\"\".concat(arg0, \"\\\"\"));\n});","map":{"version":3,"sources":["../../src/rng-factory.ts"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AAEA,OAAO,GAAP,MAAgB,OAAhB;AACA,OAAO,WAAP,MAAwB,uBAAxB;AAEA;;;;;;;AAOG;;AACH,gBAAe,YAAgC;AAAA,oCAAX,IAAW;AAAX,IAAA,IAAW;AAAA;;AAAA,eACT,IADS;AAAA,MACtC,IADsC,uBAC/B,SAD+B;AAAA,MACjB,IADiB,GACT,IADS;;AAG7C,UAAQ,OAAO,IAAf;AACE,SAAK,QAAL;AACE,UAAI,IAAI,YAAY,GAApB,EAAyB;AACvB,eAAO,IAAP;AACD;;AACD;;AAEF,SAAK,UAAL;AACE,aAAO,IAAI,WAAJ,CAAgB,IAAhB,CAAP;;AAEF,SAAK,QAAL;AACA,SAAK,QAAL;AACE,aAAO,IAAI,WAAJ,CAAgB,UAAU,MAAV,4BAAc,IAAd,EAAhB,CAAP;AAZJ;;AAeA,QAAM,IAAI,KAAJ,yBAA0B,IAA1B,QAAN;AACD,CAnBD","sourceRoot":"","sourcesContent":["import seedrandom from 'seedrandom';\nimport RNG from './rng';\nimport RNGFunction from './generators/function';\n/**\n * Construct an RNG with variable inputs. Used in calls to Random constructor\n * @param {...*} args - Distribution-specific arguments\n * @return RNG\n *\n * @example\n * new Random(RNGFactory(...args))\n */\nexport default (...args) => {\n    const [arg0 = 'default', ...rest] = args;\n    switch (typeof arg0) {\n        case 'object':\n            if (arg0 instanceof RNG) {\n                return arg0;\n            }\n            break;\n        case 'function':\n            return new RNGFunction(arg0);\n        case 'number':\n        case 'string':\n            return new RNGFunction(seedrandom(...rest));\n    }\n    throw new Error(`invalid RNG \"${arg0}\"`);\n};\n//# sourceMappingURL=rng-factory.js.map"]},"metadata":{},"sourceType":"module"}