{"ast":null,"code":"import _classCallCheck from \"/Users/darionti/Desktop/WebDev/Periodistan/periodistan/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nexport function numberValidator(num) {\n  return new NumberValidator(num);\n}\nexport var NumberValidator = function NumberValidator(num) {\n  var _this = this;\n\n  _classCallCheck(this, NumberValidator);\n\n  this.isInt = function () {\n    if (Number.isInteger(_this.n)) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be an integer, got \".concat(_this.n));\n  };\n\n  this.isPositive = function () {\n    if (_this.n > 0) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be positive, got \".concat(_this.n));\n  };\n\n  this.lessThan = function (v) {\n    if (_this.n < v) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be less than \".concat(v, \", got \").concat(_this.n));\n  };\n\n  this.greaterThanOrEqual = function (v) {\n    if (_this.n >= v) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be greater than or equal to \".concat(v, \", got \").concat(_this.n));\n  };\n\n  this.greaterThan = function (v) {\n    if (_this.n > v) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be greater than \".concat(v, \", got \").concat(_this.n));\n  };\n\n  this.n = num;\n};","map":{"version":3,"sources":["../../src/validation.ts"],"names":[],"mappings":";AAAA,OAAM,SAAU,eAAV,CAA0B,GAA1B,EAAqC;AACzC,SAAO,IAAI,eAAJ,CAAoB,GAApB,CAAP;AACD;AAED,WAAa,eAAb,GAEE,yBAAY,GAAZ,EAAuB;AAAA;;AAAA;;AAIhB,OAAA,KAAA,GAAQ,YAAW;AACxB,QAAI,MAAM,CAAC,SAAP,CAAiB,KAAI,CAAC,CAAtB,CAAJ,EAA8B;AAC5B,aAAO,KAAP;AACD;;AACD,UAAM,IAAI,KAAJ,iDAAmD,KAAI,CAAC,CAAxD,EAAN;AACD,GALM;;AAOA,OAAA,UAAA,GAAa,YAAW;AAC7B,QAAI,KAAI,CAAC,CAAL,GAAS,CAAb,EAAgB;AACd,aAAO,KAAP;AACD;;AACD,UAAM,IAAI,KAAJ,+CAAiD,KAAI,CAAC,CAAtD,EAAN;AACD,GALM;;AAOA,OAAA,QAAA,GAAW,UAAC,CAAD,EAAoB;AACpC,QAAI,KAAI,CAAC,CAAL,GAAS,CAAb,EAAgB;AACd,aAAO,KAAP;AACD;;AACD,UAAM,IAAI,KAAJ,2CAA6C,CAA7C,mBAAuD,KAAI,CAAC,CAA5D,EAAN;AACD,GALM;;AAOA,OAAA,kBAAA,GAAqB,UAAC,CAAD,EAAoB;AAC9C,QAAI,KAAI,CAAC,CAAL,IAAU,CAAd,EAAiB;AACf,aAAO,KAAP;AACD;;AACD,UAAM,IAAI,KAAJ,0DAC8C,CAD9C,mBACwD,KAAI,CAAC,CAD7D,EAAN;AAGD,GAPM;;AASA,OAAA,WAAA,GAAc,UAAC,CAAD,EAAoB;AACvC,QAAI,KAAI,CAAC,CAAL,GAAS,CAAb,EAAgB;AACd,aAAO,KAAP;AACD;;AACD,UAAM,IAAI,KAAJ,8CAAgD,CAAhD,mBAA0D,KAAI,CAAC,CAA/D,EAAN;AACD,GALM;;AAjCL,OAAK,CAAL,GAAS,GAAT;AACD,CAJH","sourceRoot":"","sourcesContent":["export function numberValidator(num) {\n    return new NumberValidator(num);\n}\nexport class NumberValidator {\n    constructor(num) {\n        this.isInt = () => {\n            if (Number.isInteger(this.n)) {\n                return this;\n            }\n            throw new Error(`Expected number to be an integer, got ${this.n}`);\n        };\n        this.isPositive = () => {\n            if (this.n > 0) {\n                return this;\n            }\n            throw new Error(`Expected number to be positive, got ${this.n}`);\n        };\n        this.lessThan = (v) => {\n            if (this.n < v) {\n                return this;\n            }\n            throw new Error(`Expected number to be less than ${v}, got ${this.n}`);\n        };\n        this.greaterThanOrEqual = (v) => {\n            if (this.n >= v) {\n                return this;\n            }\n            throw new Error(`Expected number to be greater than or equal to ${v}, got ${this.n}`);\n        };\n        this.greaterThan = (v) => {\n            if (this.n > v) {\n                return this;\n            }\n            throw new Error(`Expected number to be greater than ${v}, got ${this.n}`);\n        };\n        this.n = num;\n    }\n}\n//# sourceMappingURL=validation.js.map"]},"metadata":{},"sourceType":"module"}