{"ast":null,"code":"var _jsxFileName = \"/Users/darionti/Desktop/WebDev/Periodistan/periodistan/client/src/Pages/BlogPostAxiosPage/Index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Axios from 'axios';\nimport Post from '../../Components/Post';\nimport Pagination from 'react-bootstrap/Pagination';\nimport './stylePost.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BlogPostAxios() {\n  _s();\n\n  const [thread0, setThread0] = useState([\"\"]);\n  const [thread1, setThread1] = useState([\"\"]);\n  const [thread2, setThread2] = useState([\"\"]);\n  const [thread3, setThread3] = useState([\"\"]);\n  const [thread4, setThread4] = useState([\"\"]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [numOfPosts, setNumOfPosts] = useState('');\n  const history = useHistory();\n  const currentUrl = history.location.pathname;\n  useEffect(() => {\n    // First i store the post id from the URL into a variable.\n    const postId = parseInt(currentUrl.replace(/[^0-9]/g, \"\")); //Then I fetch into my database querying the Posts by ID\n\n    if (currentUrl.slice(1, 4) === \"afr\") {\n      Axios.get(`https://periodistan-threads.herokuapp.com/api/africa/${postId}`).then(response => {\n        //Having the response i take the text part and the images and make a new Array to later turn into a full array that i will Map\n        setThread0([response.data[0].text_0, ...response.data[0].img_0.split(',')]);\n        setThread1([response.data[0].text_1, ...response.data[0].img_1.split(',')]);\n        setThread2([response.data[0].text_2, ...response.data[0].img_2.split(',')]);\n        setThread3([response.data[0].text_3, ...response.data[0].img_3.split(',')]); //If the number of posts is 5 i will also retrieve that info. All posts have 4 or 5 pages\n\n        if (response.data[0].posts === 5) {\n          setThread4([response.data[0].text_4, ...response.data[0].img_4.split(',')]);\n        }\n\n        setNumOfPosts(response.data[0].posts);\n      });\n    } else {\n      Axios.get(`https://periodistan-threads.herokuapp.com/api/america/${postId}`).then(response => {\n        //Having the response i take the text part and the images and make a new Array to later turn into a full array that i will Map\n        setThread0([response.data[0].text_0, ...response.data[0].img_0.split(',')]);\n        setThread1([response.data[0].text_1, ...response.data[0].img_1.split(',')]);\n        setThread2([response.data[0].text_2, ...response.data[0].img_2.split(',')]);\n        setThread3([response.data[0].text_3, ...response.data[0].img_3.split(',')]); //If the number of posts is 5 i will also retrieve that info. All posts have 4 or 5 pages\n\n        if (response.data[0].posts === 5) {\n          setThread4([response.data[0].text_4, ...response.data[0].img_4.split(',')]);\n        }\n\n        setNumOfPosts(response.data[0].posts);\n      });\n    }\n  }, [currentUrl]); // ## Number of pages the Pagination will display. As i only want 1 post per page it is simple math.\n\n  const pageNumbers = [];\n\n  for (let i = 1; i <= numOfPosts / 1; i++) {\n    pageNumbers.push(i);\n  } // Get a new Array with every thread wich makes it easier to Map\n\n\n  const allThreads = [thread0, thread1, thread2, thread3, thread4]; // ## Sets the current page using the Pagination.Item ID, wich is the same number as the page.\n\n  function handleClick(e) {\n    setCurrentPage(Number(e.target.id));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blogpost-container\",\n    children: [/*#__PURE__*/_jsxDEV(Post, {\n      cardText: allThreads[currentPage - 1][0],\n      cardImage1: allThreads[currentPage - 1][1],\n      cardImage2: allThreads[currentPage - 1][2],\n      cardImage3: allThreads[currentPage - 1][3],\n      cardImage4: allThreads[currentPage - 1][4],\n      cardImage5: allThreads[currentPage - 1][5]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      children: pageNumbers.map(number => /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        id: number,\n        onClick: handleClick,\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n}\n\n_s(BlogPostAxios, \"Is8KVxaAH1hcmS9cePoGdSv2O4s=\", false, function () {\n  return [useHistory];\n});\n\n_c = BlogPostAxios;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogPostAxios\");","map":{"version":3,"sources":["/Users/darionti/Desktop/WebDev/Periodistan/periodistan/client/src/Pages/BlogPostAxiosPage/Index.js"],"names":["React","useState","useEffect","useHistory","Axios","Post","Pagination","BlogPostAxios","thread0","setThread0","thread1","setThread1","thread2","setThread2","thread3","setThread3","thread4","setThread4","currentPage","setCurrentPage","numOfPosts","setNumOfPosts","history","currentUrl","location","pathname","postId","parseInt","replace","slice","get","then","response","data","text_0","img_0","split","text_1","img_1","text_2","img_2","text_3","img_3","posts","text_4","img_4","pageNumbers","i","push","allThreads","handleClick","e","Number","target","id","map","number"],"mappings":"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","sourcesContent":["\nimport  React  from \"react\";\nimport {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport Axios from 'axios'\nimport Post from '../../Components/Post'\nimport Pagination from 'react-bootstrap/Pagination'\nimport './stylePost.css'\n\n\nexport default function BlogPostAxios(){\n\n  const [thread0, setThread0] = useState([\"\"])\n  const [thread1, setThread1] = useState([\"\"])\n  const [thread2, setThread2] = useState([\"\"])\n  const [thread3, setThread3] = useState([\"\"])\n  const [thread4, setThread4] = useState([\"\"])\n  \n \n  const [currentPage, setCurrentPage] = useState(1)\n  const [numOfPosts, setNumOfPosts] = useState('')\n\n  const history = useHistory()\n  const currentUrl = history.location.pathname\n\n  \n\n\n\n  useEffect(()=>{\n    // First i store the post id from the URL into a variable.\n    const postId = parseInt(currentUrl.replace(/[^0-9]/g, \"\"))\n    //Then I fetch into my database querying the Posts by ID\n  if(currentUrl.slice(1,4) === \"afr\"){Axios.get(`https://periodistan-threads.herokuapp.com/api/africa/${postId}`).then((response)=>{ \n      //Having the response i take the text part and the images and make a new Array to later turn into a full array that i will Map\n      setThread0([response.data[0].text_0, ...response.data[0].img_0.split(',')])\n      setThread1([response.data[0].text_1, ...response.data[0].img_1.split(',')])\n      setThread2([response.data[0].text_2, ...response.data[0].img_2.split(',')])\n      setThread3([response.data[0].text_3, ...response.data[0].img_3.split(',')])\n      //If the number of posts is 5 i will also retrieve that info. All posts have 4 or 5 pages\n      if(response.data[0].posts === 5){setThread4([response.data[0].text_4, ...response.data[0].img_4.split(',')])}\n      setNumOfPosts(response.data[0].posts)})}\n    else{\n      Axios.get(`https://periodistan-threads.herokuapp.com/api/america/${postId}`).then((response)=>{ \n      //Having the response i take the text part and the images and make a new Array to later turn into a full array that i will Map\n      setThread0([response.data[0].text_0, ...response.data[0].img_0.split(',')])\n      setThread1([response.data[0].text_1, ...response.data[0].img_1.split(',')])\n      setThread2([response.data[0].text_2, ...response.data[0].img_2.split(',')])\n      setThread3([response.data[0].text_3, ...response.data[0].img_3.split(',')])\n      //If the number of posts is 5 i will also retrieve that info. All posts have 4 or 5 pages\n      if(response.data[0].posts === 5){setThread4([response.data[0].text_4, ...response.data[0].img_4.split(',')])}\n      setNumOfPosts(response.data[0].posts)}\n      )}\n  }, [currentUrl])  \n\n// ## Number of pages the Pagination will display. As i only want 1 post per page it is simple math.\nconst pageNumbers = []\nfor (let i = 1; i <= numOfPosts / 1; i++){\n    pageNumbers.push(i)\n} \n\n// Get a new Array with every thread wich makes it easier to Map\nconst allThreads = [thread0, thread1, thread2, thread3, thread4]\n\n// ## Sets the current page using the Pagination.Item ID, wich is the same number as the page.\nfunction handleClick(e){\n  setCurrentPage(Number(e.target.id))\n}\n  return (\n      <div className='blogpost-container'>\n      {/* // ## Using the CurrentPage I choose wich of the posts i want to show */}\n\n            { <Post  \n                  cardText={allThreads[currentPage-1][0]}\n                  cardImage1={allThreads[currentPage-1][1]}\n                  cardImage2={allThreads[currentPage-1][2]}\n                  cardImage3={allThreads[currentPage-1][3]}\n                  cardImage4={allThreads[currentPage-1][4]}\n                  cardImage5={allThreads[currentPage-1][5]} \n                  />   } \n\n          <Pagination>\n          { pageNumbers.map(number => \n            ( <Pagination.Item \n                key={number} \n                id={number}\n                onClick={handleClick}\n                >{number}</Pagination.Item> )) \n          }\n          </Pagination>\n\n      </div>\n  )\n}\n  "]},"metadata":{},"sourceType":"module"}