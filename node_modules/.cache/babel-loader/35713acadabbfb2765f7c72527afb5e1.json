{"ast":null,"code":"var _jsxFileName = \"/Users/darionti/Desktop/WebDev/Periodistan/periodistan/src/Pages/BlogPostLocalPage/Index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport Post from '../../Components/Post';\nimport europaThread from '../../JsonThreads/europaThread.json';\nimport asiaThread from '../../JsonThreads/asiaThread.json';\nimport { useHistory } from 'react-router-dom';\nimport Pagination from 'react-bootstrap/Pagination';\nimport './stylePost.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BlogPostLocal() {\n  _s();\n\n  // ## Here i store, as a separate array, the part of the Json file where i have the info i need\n  const [slicedThread, setSlicedThread] = useState([{\n    text: \"\",\n    images: [\"\"]\n  }]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPosts, setTotalPosts] = useState(\"\"); // ## This part of the URL will help the program choose wich JSON file it will store \n\n  const history = useHistory();\n  const currentUrl = history.location.pathname;\n  console.log(currentUrl.length);\n  useEffect(() => {\n    // ## My linkTo always have 5 letter so it is always the same part \n    const continent = currentUrl.slice(1, 6);\n    const threadWithOneDigitId = currentUrl.slice(-1);\n    const threadWithTwoDigitId = currentUrl.slice(-2);\n\n    if (continent === \"europ\") {\n      // ## How many Posts does the thread have\n      // ## EUROPA THREAD -------\n      setTotalPosts(() => {\n        if (currentUrl.length === 8) {\n          return europaThread[threadWithOneDigitId].cards.length;\n        } else {\n          return europaThread[threadWithTwoDigitId].cards.length;\n        }\n      }); // ## Here I get the array where I have the actual Info\n\n      setSlicedThread(() => {\n        if (currentUrl.length === 8) {\n          return europaThread[threadWithOneDigitId].cards.slice(0, europaThread[threadWithOneDigitId].cards.length);\n        } else {\n          return europaThread[threadWithTwoDigitId].cards.slice(0, europaThread[threadWithTwoDigitId].cards.length);\n        }\n      }); // ## ASIA THREAD -------\n\n      console.log(continent);\n    } else if (continent.slice(0, 3) === \"asi\") {\n      setTotalPosts(() => {\n        if (currentUrl.length === 6) {\n          return asiaThread[threadWithOneDigitId].cards.length;\n        } else {\n          return asiaThread[threadWithTwoDigitId].cards.length;\n        }\n      });\n      setSlicedThread(() => {\n        if (currentUrl.length === 6) {\n          return asiaThread[threadWithOneDigitId].cards.slice(0, asiaThread[threadWithOneDigitId].cards.length);\n        } else {\n          return asiaThread[threadWithTwoDigitId].cards.slice(0, asiaThread[threadWithTwoDigitId].cards.length);\n        }\n      });\n    }\n  }, [currentUrl]); // ## Number of pages the Pagination will display. As i only want 1 post per page it is simple math.\n\n  const pageNumbers = [];\n\n  for (let i = 1; i <= totalPosts / 1; i++) {\n    pageNumbers.push(i);\n  } // ## Sets the current page using the Pagination.Item ID, wich is the same number as the page.\n\n\n  function handleClick(e) {\n    setCurrentPage(Number(e.target.id));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blogpost-container\",\n    children: [slicedThread.slice(currentPage - 1, currentPage).map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Post, {\n        cardText: item.text,\n        cardImage1: item.images[0],\n        cardImage2: item.images[1],\n        cardImage3: item.images[2],\n        cardImage4: item.images[3],\n        cardImage5: item.images[4]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Pagination, {\n      children: pageNumbers.map(number => /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        id: number,\n        onClick: handleClick,\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n}\n\n_s(BlogPostLocal, \"LtqgVRgoi8K8nelOl3xXdT+qgXY=\", false, function () {\n  return [useHistory];\n});\n\n_c = BlogPostLocal;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogPostLocal\");","map":{"version":3,"sources":["/Users/darionti/Desktop/WebDev/Periodistan/periodistan/src/Pages/BlogPostLocalPage/Index.js"],"names":["React","useState","useEffect","Post","europaThread","asiaThread","useHistory","Pagination","BlogPostLocal","slicedThread","setSlicedThread","text","images","currentPage","setCurrentPage","totalPosts","setTotalPosts","history","currentUrl","location","pathname","console","log","length","continent","slice","threadWithOneDigitId","threadWithTwoDigitId","cards","pageNumbers","i","push","handleClick","e","Number","target","id","map","item","index","number"],"mappings":"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","sourcesContent":["\nimport  React  from \"react\";\nimport {useState, useEffect} from 'react'\nimport Post from '../../Components/Post'\nimport europaThread from '../../JsonThreads/europaThread.json'\nimport asiaThread from '../../JsonThreads/asiaThread.json'\nimport {useHistory} from 'react-router-dom'\nimport Pagination from 'react-bootstrap/Pagination'\nimport './stylePost.css'\n\n\nexport default function BlogPostLocal(){\n\n  // ## Here i store, as a separate array, the part of the Json file where i have the info i need\n  const [slicedThread, setSlicedThread] = useState([\n    {\n      text: \"\",\n      images: [\"\"] \n    }\n])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalPosts, setTotalPosts] = useState(\"\")\n  \n   // ## This part of the URL will help the program choose wich JSON file it will store \n  const history = useHistory()\n  const currentUrl = history.location.pathname\n  console.log(currentUrl.length)\n\nuseEffect(() => {\n  // ## My linkTo always have 5 letter so it is always the same part \n  const continent = currentUrl.slice(1, 6)\n  const threadWithOneDigitId = currentUrl.slice(-1)\n  const threadWithTwoDigitId = currentUrl.slice(-2)\n  if (continent === \"europ\") {\n  // ## How many Posts does the thread have\n  // ## EUROPA THREAD -------\n    setTotalPosts(()=>{\n      if(currentUrl.length === 8) {\n        return (europaThread[threadWithOneDigitId].cards.length)}\n        else{\n          return (europaThread[threadWithTwoDigitId].cards.length)\n        }})\n    // ## Here I get the array where I have the actual Info\n    setSlicedThread(()=>{\n      if(currentUrl.length === 8){\n        return (europaThread[threadWithOneDigitId].cards.slice(0, europaThread[threadWithOneDigitId].cards.length))}\n        else {\n          return (europaThread[threadWithTwoDigitId].cards.slice(0, europaThread[threadWithTwoDigitId].cards.length))\n        }\n      })\n\n    // ## ASIA THREAD -------\n    console.log(continent)\n  } else if(continent.slice(0,3) === \"asi\" ) {\n    setTotalPosts(()=>{\n      if(currentUrl.length === 6) {\n        return (asiaThread[threadWithOneDigitId].cards.length)}\n        else{\n          return (asiaThread[threadWithTwoDigitId].cards.length)\n        }})\n    setSlicedThread(()=>{\n      if(currentUrl.length === 6){\n        return (asiaThread[threadWithOneDigitId].cards.slice(0, asiaThread[threadWithOneDigitId].cards.length))}\n        else {\n          return (asiaThread[threadWithTwoDigitId].cards.slice(0, asiaThread[threadWithTwoDigitId].cards.length))\n        }\n      })\n  }\n}, [currentUrl])\n\n\n// ## Number of pages the Pagination will display. As i only want 1 post per page it is simple math.\nconst pageNumbers = []\nfor (let i = 1; i <= totalPosts / 1; i++){\n    pageNumbers.push(i)\n}\n\n// ## Sets the current page using the Pagination.Item ID, wich is the same number as the page.\nfunction handleClick(e){\n      setCurrentPage(Number(e.target.id))\n}\n\n  return (\n      <div className='blogpost-container'>\n      {/* // ## Using the CurrentPage I choose wich of the posts i want to show */}\n            {  slicedThread.slice(currentPage - 1, currentPage).map((item, index)=>{\n                    return (<Post  \n                  key={index}\n                  cardText={item.text}\n                  cardImage1={item.images[0]}\n                  cardImage2={item.images[1]}\n                  cardImage3={item.images[2]}\n                  cardImage4={item.images[3]}\n                  cardImage5={item.images[4]} \n                  /> )})  } \n          <Pagination>\n          { pageNumbers.map(number => \n            ( <Pagination.Item \n                key={number} \n                id={number}\n                onClick={handleClick}\n                >{number}</Pagination.Item> )) \n                \n          }\n          </Pagination>\n\n      </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}